package org.tinkoff.task5;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int result = 0;
        Object[] incomingParameters = getAndCheckIncomingParameters();
        long l = (long) incomingParameters[0];
        long r = (long) incomingParameters[1];
        // 1 - 2_147_483_647
        int[] ints = {
                1, 2, 3, 4, 5, 6, 7, 8, 9,
                11, 33, 22, 44, 55, 66, 77, 88, 99,
                111, 222, 333, 444, 555, 666, 777, 888, 999,
                1111, 2222, 3333, 4444, 5555, 6666, 7777, 8888, 9999,
                11111, 22222, 33333, 44444, 55555, 66666, 77777, 88888, 99999,
                111111, 222222, 333333, 444444, 555555, 666666, 777777, 888888, 999999,
                1111111, 2222222, 3333333, 4444444, 5555555, 6666666, 7777777, 8888888, 9999999,
                11111111, 22222222, 33333333, 44444444, 55555555, 66666666, 77777777, 88888888, 99999999,
                111111111, 222222222, 333333333, 444444444, 555555555, 666666666, 777777777, 888888888, 999999999,
                1111111111
        };
        // 1 - 1_000_000_000_000_000_000
        long[] longs = {
                1, 2, 3, 4, 5, 6, 7, 8, 9,
                11, 22, 33, 44, 55, 66, 77, 88, 99,
                111, 222, 333, 444, 555, 666, 777, 888, 999,
                1111, 2222, 3333, 4444, 5555, 6666, 7777, 8888, 9999,
                11111, 22222, 33333, 44444, 55555, 66666, 77777, 88888, 99999,
                111111, 222222, 333333, 444444, 555555, 666666, 777777, 888888, 999999,
                1111111, 2222222, 3333333, 4444444, 5555555, 6666666, 7777777, 8888888, 9999999,
                11111111, 22222222, 33333333, 44444444, 55555555, 66666666, 77777777, 88888888, 99999999,
                111111111, 222222222, 333333333, 444444444, 555555555, 666666666, 777777777, 888888888, 999999999,
                1111111111, 2222222222L, 3333333333L, 4444444444L, 5555555555L, 6666666666L, 7777777777L, 8888888888L, 9999999999L,
                11111111111L, 22222222222L, 33333333333L, 44444444444L, 55555555555L, 66666666666L, 77777777777L, 88888888888L, 99999999999L,
                111111111111L, 222222222222L, 333333333333L, 444444444444L, 555555555555L, 666666666666L, 777777777777L, 888888888888L, 999999999999L,
                1111111111111L, 2222222222222L, 3333333333333L, 4444444444444L, 5555555555555L, 6666666666666L, 7777777777777L, 8888888888888L, 9999999999999L,
                11111111111111L, 22222222222222L, 33333333333333L, 44444444444444L, 55555555555555L, 66666666666666L, 77777777777777L, 88888888888888L, 99999999999999L,
                111111111111111L, 222222222222222L, 333333333333333L, 444444444444444L, 555555555555555L, 666666666666666L, 777777777777777L, 888888888888888L, 999999999999999L,
                1111111111111111L, 2222222222222222L, 3333333333333333L, 4444444444444444L, 5555555555555555L, 6666666666666666L, 7777777777777777L, 8888888888888888L, 9999999999999999L,
                11111111111111111L, 22222222222222222L, 33333333333333333L, 44444444444444444L, 55555555555555555L, 66666666666666666L, 77777777777777777L, 88888888888888888L, 99999999999999999L,
                111111111111111111L, 222222222222222222L, 333333333333333333L, 444444444444444444L, 555555555555555555L, 666666666666666666L, 777777777777777777L, 888888888888888888L, 999999999999999999L
        };
        if (r <= Integer.MAX_VALUE) {
            l = (int) l;
            r = (int) r;
            for (int curInt : ints) {
                if (curInt >= l && curInt <= r) {
                    result++;
                }
            }
        } else {
            for (long curLong : longs) {
                if (curLong >= l && curLong <= r) {
                    result++;
                }
            }
        }
        System.out.println(result);
    }

    private static Object[] getAndCheckIncomingParameters() {
        Object[] result = new Object[3];
        Scanner scanner = new Scanner(System.in);
        Object[] naturalNumbers = getAndCheckNaturalNumbers(scanner);
        result[0] = naturalNumbers[0];
        result[1] = naturalNumbers[1];
        return result;
    }

    private static Object[] getAndCheckNaturalNumbers(final Scanner scanner) {
        Object[] result = new Object[2];
        long l = 0;
        long r = 0;
        String firstLine = scanner.nextLine();
        String[] strings = firstLine.split(" ");
        int numberOfNonEmptyStrings = 0;
        for (String string : strings) {
            if (!"".equals(string)) {
                numberOfNonEmptyStrings++;
                if (numberOfNonEmptyStrings == 1) {
                    l = Long.parseLong(string);
                } else if (numberOfNonEmptyStrings == 2) {
                    r = Long.parseLong(string);
                } else {
                    break;
                }
            }
        }
        if (l < 1 || l > Math.pow(10, 18) ||
                r < 1 || r > Math.pow(10, 18)) {
            throw new NumberFormatException();
        }
        result[0] = l;
        result[1] = r;
        return result;
    }
}